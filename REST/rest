#!/usr/bin/perl -w

use strict;
use warnings;
use utf8;

use CGI '3.30', ();
use CGI::Carp qw( fatalsToBrowser );

use Config::Simple;
use DBI;

use JSON;

my $apititle = 'Shownotes Message Service REST-API';

# make a new config config object
my $cfg = new Config::Simple('../sms.config');

# some global variables
my $programpath = $cfg->param('directory');
my $account = '';

# connect to database
my $dbh = DBI->connect("dbi:SQLite:dbname=$programpath/data.db",
                       "",
                       "",
                       {RaiseError => 1}, #Exceptions instead of error
) or die $DBI::errstr;

my $q = CGI->new;

sub GET($$) {
    my ($path, $code) = @_;
    return unless $q->request_method eq 'GET' or $q->request_method eq 'HEAD';
    return unless $q->path_info =~ $path;
    $code->();
    exit;
}

sub POST($$) {
    my ($path, $code) = @_;
    return unless $q->request_method eq 'POST' and $q->content_type eq 'application/json';
    return unless $q->path_info =~ $path;
    $code->();
    exit;
}

sub PUT($$) {
    my ($path, $code) = @_;
    return unless $q->request_method eq 'PUT' and $q->content_type eq 'application/json';
    return unless $q->path_info =~ $path;
    $code->();
    exit;
}

sub DELETE($$) {
    my ($path, $code) = @_;
    return unless $q->request_method eq 'DELETE';
    return unless $q->path_info =~ $path;
    $code->();
    exit;
}

eval {

    # PUT subscribe a new user
    POST qr{^/subscribe$} => sub {
        # get JSON and decode it to hash
        my @rawdata = $q->param( 'POSTDATA' );
        my $subscribers = JSON->new->utf8(1)->decode(@rawdata);

        print $q->header(-status=>200, -type=>'text/html; charset=UTF-8');
        
        foreach my $subscriber (keys %$subscribers) {
            print $subscriber."\n";

            foreach my $slugs ($subscribers->{$subscriber}) {
                foreach my $podslug (@$slugs) {
                    print "  ".$podslug."\n";
                }
            }
        }
    };

    # No arguments provided - print API description
    GET qr{^$} => sub {
        print $q->header(-status=>200, -type=>'text/html; charset=UTF-8');
        
        # open api.html
        open FILE,"<","../doc/api.html" or die $!;
        
        # print file
        while (<FILE>) {
            print $_;
        }
    };
    
    # Get all slugs with count of subscribers and title
    GET qr{^/slug} => sub {
        
        my $slugs = $dbh->prepare( "SELECT DISTINCT slug,title FROM podcasts ORDER BY slug ASC" );  
        $slugs->execute();

        if(defined $slugs){
            print $q->header(-status=>200, -type=>'application/json; charset=UTF-8');
            
            my $out = "{\"slugs\":{";
            while(my @slug = $slugs->fetchrow_array()){
                
                my $count = $dbh->prepare( "SELECT count(*) FROM subscriptions WHERE slug LIKE '$slug[0]'" );  
                $count->execute();
                my $counter = $count->fetchrow_array();

                $out = $out."\"$slug[0]\":{\"subscriptions\":$counter, \"title\":\"$slug[1]\"},"; 
                $count->finish();
            }       
            chop($out); 
            print $out."}}";
        }
        else {
            print $q->header(-status=>204, -type=>'text/html; charset=UTF-8');
        }

        $slugs->finish();
    };
       
    # GET infos about all subscribers over jid
    GET qr{^/subscriber$} => sub {
        
        my $res = $dbh->selectall_arrayref( "SELECT * FROM subscribers ORDER BY jid ASC" );  
        if(@$res){
            print $q->header(-status=>200, -type=>'application/json; charset=UTF-8');
                        
            my $out = "{"; 
            foreach my $row (@$res) {
                my($jid, $pad,$info) = @$row;
                $out = $out."\"$jid\":{\"pad\":\"$pad\", \"info\":\"$info\"},";
            }
            chop($out); 
            print $out."}";
        }
        else {
            print $q->header(-status=>204, -type=>'text/html; charset=UTF-8');
        }
    };

 
    # GET infos about a particular subscriber over jid
    GET qr{^/subscriber/([\w|\d|-]+@[\w|\d|-]+\.\w+)$} => sub {
        
        my $res = $dbh->selectall_arrayref( "SELECT pad,info FROM subscribers WHERE jid LIKE '$1'" );
        if(@$res){
            print $q->header(-status=>200, -type=>'application/json; charset=UTF-8');
            
            my $out = "{\"$1\":";        
            foreach my $row (@$res) {
                my($pad,$info) = @$row;
                $out = $out."{\"pad\":\"$pad\", \"info\":\"$info\"}";
            }
            print $out."}";
        }  
        else {
            print $q->header(-status=>204, -type=>'text/html; charset=UTF-8');
        }
    };

    # GET infos about all subscriptions sorted by jid
    GET qr{^/subscription/jid$} => sub {
        my $jids = $dbh->prepare( "SELECT jid FROM subscribers ORDER BY jid ASC" );  
        $jids->execute();

        if(defined $jids){
            print $q->header(-status=>200, -type=>'application/json; charset=UTF-8');
            
            my $out = "{";
            while(my $jid = $jids->fetchrow_array()){
                my $res = $dbh->selectall_arrayref( "SELECT slug FROM subscriptions WHERE jid LIKE '$jid' ORDER BY slug ASC" );  
                        
                $out = $out."\"$jid\":["; 
                foreach my $row (@$res) {
                    my($slug) = @$row;
                    $out = $out."\"$slug\",";
                }
                chop($out);
                $out = $out."],";
            }       
            chop($out); 
            print $out."}";
        }
        else {
            print $q->header(-status=>204, -type=>'text/html; charset=UTF-8');
        }

        $jids->finish();
    };

    # GET infos about all subscribed slugs of one particular user
    GET qr{^/subscription/jid/(([\w|\d|-]+\.)+[\w|\d|-]+@([\w|\d|-]+\.)+[\w|\d|-]+\.\w+)$} => sub {
        
        my $jid = lc $1;
        my $res = $dbh->selectall_arrayref( "SELECT slug FROM subscriptions WHERE jid LIKE '$jid' ORDER BY slug ASC" );  
        
        if(@$res){
            print $q->header(-status=>200, -type=>'application/json; charset=UTF-8');

            my $out = "{\"slugs\":["; 
            foreach my $row (@$res) {
                my($slug) = @$row;
                $out = $out."\"$slug\",";
            }
            chop($out); 
            print $out."]}";
        }  
        else {
            print $q->header(-status=>204, -type=>'text/html; charset=UTF-8');
        }
    };


    # GET infos about all subscriptions sorted by slug
    GET qr{^/subscription/slug$} => sub {
        my $slugs = $dbh->prepare( "SELECT DISTINCT slug FROM subscriptions ORDER BY slug ASC" );  
        $slugs->execute();

        if(defined $slugs){
            print $q->header(-status=>200, -type=>'application/json; charset=UTF-8');
            
            my $out = "{";
            while(my $slug = $slugs->fetchrow_array()){
                my $res = $dbh->selectall_arrayref( "SELECT jid FROM subscriptions WHERE slug LIKE '$slug' ORDER BY jid ASC" );  
                        
                $out = $out."\"$slug\":["; 
                foreach my $row (@$res) {
                    my($jid) = @$row;
                    $out = $out."\"$jid\",";
                }
                chop($out);
                $out = $out."],";
            }       
            chop($out); 
            print $out."}";
        }
        else {
            print $q->header(-status=>204, -type=>'text/html; charset=UTF-8');
        }

        $slugs->finish();
    };


    # GET infos about all subscribed jids of one particular user
    GET qr{^/subscription/slug/([\w|\d|-]+)$} => sub {
         
        my $res = $dbh->selectall_arrayref( "SELECT jid FROM subscriptions WHERE slug LIKE '$1' ORDER BY jid ASC" );  
         
        if(@$res){
            print $q->header(-status=>200, -type=>'application/json; charset=UTF-8');

            my $out = "{\"$1\":["; 
            foreach my $row (@$res) {
                my($jid) = @$row;
                $out = $out."\"$jid\",";
            }
            chop($out); 
            print $out."]}";
        }  
        else {
            print $q->header(-status=>204, -type=>'text/html; charset=UTF-8');
        }
    };

    # Unmatched REST
    GET qr{^/(.+)?$} => sub {
        # Nothing handles this, throw back a standard 404
        print $q->header(-status=>404, -type=>'text/html; charset=UTF-8');
        print $q->start_html(-title=>$apititle);
        print $q->h1('Nothing has been matched or the arguments are invalid.');
        print $q->end_html;
    };

    exit;
};

if ($@) {
    # Handle errors
    if (ref $@ and reftype $@ eq 'HASH') {
        my $ERROR = $@;
        print $q->header(-status=>$ERROR->{status}, -type=>'text/html; charset=UTF-8');
        print $q->h1($ERROR->{title});
        print $q->p($ERROR->{message}) if $ERROR->{message};
        print $q->end_html;
    }

    # Handle anything else
    else {
        # Nothing handles this, throw back a standard 404
        print $q->header(-status=>404, -type=>'text/html; charset=UTF-8');
        print $q->start_html(-title=>$apititle);
        print $q->h1('Nothing has been matched or the arguments are invalid.');
        print $q->end_html;
    }
    exit;
}
